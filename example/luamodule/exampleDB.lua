---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wakfu.
--- DateTime: 2020/8/4 17:58
---
local example = {}
--
local luaDbSqLite = require('module_db.db_module')
--luaDbSqLite.closeDbByTag("sqlite3-salary")

local ormDb = luaDbSqLite.new("sqlite3", "./salary.db", true, "sqlite3-salary")
print("&************************@********")
local Builder = require "module_db.LuaQuB"

--增
function example.insertCol()
    local object = Builder.new()
                          :insert("t_salary",
            { name = "小明", department = "实习", social_security = 1000,
              provident_fund = 1000, salary = 5000, salary_time = 1540500066
            })
    local code, response = ormDb:Exec(tostring(object))
    print(ormDb:Tag(), response)
    return code, response
end

--删
function example.remove()
    local name = "小明"
    local object = Builder.new()
                          :delete()
                          :from("t_salary")
                          :where("`name` like ", "'%" .. name .. "%'")
    --:where("`social_security` is ", "null")
    local code, response = ormDb:Exec(tostring(object))
    print(ormDb:Tag(), response)
    return code, response
end

--改
function example.update()
    local updateData = { provident_fund = 6000, salary = 20000, salary_time = 1522036066 }
    local name = "王叔叔"
    local object = Builder.new()
                          :update("t_salary", updateData)
                          :where("`name` like ", "'%" .. name .. "%'")
    local code, response = ormDb:Exec(tostring(object))
    print(ormDb:Tag(), response)
    return code, { response = response, data = updateData }
end

--查
function example.getList()
    local object = Builder.new()
                          :select("*")
                          :from("t_salary")
                          :where({ department = "管道疏通" })
                          :where("department in", "(" .. table.concat({ "'实习'", "'油烟清理'" }, ',') .. ")", "or")
                          :where("`name` = ", "'王叔叔'", "or")
                          :limit(3, 0)

    local code, tables = ormDb:Raw(tostring(object))
    print(ormDb:Tag(), #tables)
    --ormDb:CloseDB()
    return code, { count = #tables, list = tables }
end

function example.closeDB()
    ormDb:CloseDB()
end

return example